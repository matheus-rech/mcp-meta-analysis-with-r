version: '3.8'

services:
  # Main MCP Meta-Analysis Server
  meta-analysis-server:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: mcp-meta-analysis-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - SESSION_CLEANUP_INTERVAL=3600000  # 1 hour
      - MAX_CONCURRENT_SESSIONS=50
    volumes:
      - ./user_sessions:/app/user_sessions
      - ./logs:/app/logs
    networks:
      - meta-analysis-network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for session caching (optional)
  redis:
    image: redis:7-alpine
    container_name: meta-analysis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - meta-analysis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx load balancer for multiple server instances
  nginx:
    image: nginx:alpine
    container_name: meta-analysis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - meta-analysis-network
    depends_on:
      - meta-analysis-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: meta-analysis-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - meta-analysis-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: meta-analysis-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - meta-analysis-network

networks:
  meta-analysis-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: